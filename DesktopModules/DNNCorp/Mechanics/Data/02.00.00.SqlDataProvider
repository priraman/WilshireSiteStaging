/********************************************************
 * SPROC: Mechanics_GetUserScoreLogCount
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mechanics_GetUserScoreLogCount]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mechanics_GetUserScoreLogCount] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Mechanics_GetUserScoreLogCount]
    @ScoringActionDefId INT,
    @UserId INT,
    @PortalId INT,
    @DaysSince INT = 0
AS
    IF @DaysSince > 0
        BEGIN
			DECLARE @SinceDate AS datetime  = getutcdate() - @DaysSince

            SELECT COUNT(*) AS TotalRecords
            FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog WITH (NOLOCK)
            WHERE ScoringActionDefId = @ScoringActionDefId
            AND   UserId = @UserId
            AND   PortalId = @PortalId
            AND   CreatedOnDate >= @SinceDate
        END
    ELSE
        BEGIN
            SELECT COUNT(*) AS TotalRecords
            FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog WITH (NOLOCK)
            WHERE ScoringActionDefId = @ScoringActionDefId
            AND   UserId = @UserId
            AND   PortalId = @PortalId
        END

GO

/********************************************************
 * SPROC: Mechanics_SaveUserScore
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mechanics_SaveUserScore]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mechanics_SaveUserScore] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Mechanics_SaveUserScore]
	@UserId INT,
    @PortalId INT,
    @ContentItemId INT,
    @ScoringActionDefId INT,
    @ExperiencePoints INT,
    @ReputationPoints INT,
    @Notes nvarchar(400),
    @Context nvarchar(200),
    @GroupId INT,
    @CreatedOnDate datetime = NULL

AS
BEGIN
   IF @UserId IS NULL OR @UserId < 0
        RETURN

    -- NOTE(cbond): If Analytics is installed, reschedule a recalculation of this user's analytics data in about twenty minutes. If they do something
    -- else before that twenty minutes is up, we will push the recalc forward by another 20 minutes. Only when they stop interacting with the site do
    -- we go back and reclaculate all the analytics data for that user (rather than doing so every time they complete an action, this means we will
    -- recalc the data after it has changed and after the point it is likely to be updated again. We ignore any exceptions because this is not critical
    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Reschedule_User') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    BEGIN
        BEGIN TRY
            EXEC {databaseOwner}{objectQualifier}Analytics_Reschedule_User @PortalId, @UserId
        END TRY
        BEGIN CATCH
        END CATCH
    END

    IF @CreatedOnDate IS NULL
        SET @CreatedOnDate = GETUTCDATE()

    DECLARE @UserScoringLogId INT

    INSERT INTO {databaseOwner}[{objectQualifier}Mechanics_UserScoringLog]
            ( UserId,
              PortalId,
              GroupId,
              ContentItemId,
              ScoringActionDefId,
              ExperiencePoints,
              ReputationPoints,
              Notes,
              Context,
              CreatedOnDate
            )
    VALUES  ( @UserId,
              @PortalId,
              @GroupId,
              @ContentItemId,
              @ScoringActionDefId,
              @ExperiencePoints,
              @ReputationPoints,
              @Notes,
              @Context,
              @CreatedOnDate
            )

    SET @UserScoringLogId = SCOPE_IDENTITY()
    SELECT @UserScoringLogId

    DECLARE @TotalExperiencePoints INT
    DECLARE @TotalReputationPoints INT
    DECLARE @TopReputationPoints INT
    DECLARE @InteractedCount INT
    DECLARE @ViewedCount INT
    DECLARE @CreatedCount INT
    DECLARE @EditedCount INT
    DECLARE @DeletedCount INT
    DECLARE @FlaggedCount INT


    SELECT @TotalExperiencePoints = SUM(ExperiencePoints),
        @TotalReputationPoints = SUM(ReputationPoints),
        @TopReputationPoints = SUM(CASE WHEN ReputationPoints > 0 THEN ReputationPoints ELSE 0 END),
        @InteractedCount = SUM(CASE WHEN ActionType = 0 THEN 1 ELSE 0 END),
                @ViewedCount = SUM(CASE WHEN ActionType = 1 THEN 1 ELSE 0 END),
                @CreatedCount = SUM(CASE WHEN ActionType = 2 THEN 1 ELSE 0 END),
                @EditedCount = SUM(CASE WHEN ActionType = 3 THEN 1 ELSE 0 END),
                @DeletedCount = SUM(CASE WHEN ActionType = 4 THEN 1 ELSE 0 END),
                @FlaggedCount = SUM(CASE WHEN ActionType = 5 THEN 1 ELSE 0 END)
    FROM {databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] usl
    INNER JOIN {databaseOwner}[{objectQualifier}Mechanics_ScoringActionDefinition] sad on usl.ScoringActionDefId = sad.ScoringActionDefId
    WHERE usl.UserId = @UserId
    AND usl.PortalId = @PortalId

    DECLARE @UserScoringId INT
    DECLARE @BestReputationPoints INT

    SELECT @UserScoringId = UserScoringId,
        @BestReputationPoints = COALESCE(BestReputationPoints, 0)
    FROM {databaseOwner}[{objectQualifier}Mechanics_UserScoring]
    WHERE [PortalId] = @PortalId AND [UserId] = @UserId

    DECLARE @DailyReputationPoints INT

    SELECT @DailyReputationPoints = COALESCE(SUM([ReputationPoints]), 0)
    FROM {databaseOwner}[{objectQualifier}Mechanics_UserScoringLog]
    WHERE [PortalId] = @PortalId AND [UserId] = @UserId
    AND [CreatedOnDate] >= dateadd(hour, -24, @CreatedOnDate) AND [CreatedOnDate] <= @CreatedOnDate
    AND ReputationPoints > 0

    IF @DailyReputationPoints > @BestReputationPoints OR @BestReputationPoints IS NULL
        SELECT @BestReputationPoints = @DailyReputationPoints

    IF @UserScoringId IS NOT NULL
     BEGIN
        UPDATE {databaseOwner}[{objectQualifier}Mechanics_UserScoring]
        SET ExperiencePoints = @TotalExperiencePoints,
            ReputationPoints = @TotalReputationPoints,
            TopReputationPoints = @TopReputationPoints,
            BestReputationPoints = @BestReputationPoints,
            DailyReputationPoints = @DailyReputationPoints,
            ContentInteractedCount = @InteractedCount,
            ContentViewedCount = @ViewedCount,
            ContentCreatedCount = @CreatedCount,
            ContentEditedCount = @EditedCount,
            ContentDeletedCount = @DeletedCount,
            ContentFlaggedCount = @FlaggedCount,
            LastModifiedOnDate = GETUTCDATE()
        WHERE UserScoringId = @UserScoringId
     END
    ELSE
     BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}Mechanics_UserScoring]
                ( UserId,
                  PortalId,
                  ExperiencePoints,
                  ReputationPoints,
                  TopReputationPoints,
                  BestReputationPoints,
                  DailyReputationPoints,
                  ContentInteractedCount,
                  ContentViewedCount,
                  ContentCreatedCount,
                  ContentEditedCount,
                  ContentDeletedCount,
                  ContentFlaggedCount,
                  CreatedOnDate,
                  LastModifiedOnDate
                )
        VALUES  ( @UserId,
                  @PortalId,
                  @TotalExperiencePoints,
                  @TotalReputationPoints,
                  @TopReputationPoints,
                  @BestReputationPoints,
                  @DailyReputationPoints,
                  @InteractedCount,
                  @ViewedCount,
                  @CreatedCount,
                  @EditedCount,
                  @DeletedCount,
                  @FlaggedCount,
                  GETUTCDATE(),
                  GETUTCDATE()
                )
     END
END
GO
