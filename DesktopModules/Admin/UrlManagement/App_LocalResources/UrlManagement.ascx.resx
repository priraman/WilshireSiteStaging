<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="forceLowerCaseLabel.Text" xml:space="preserve">
    <value>Use Lowercase URLs</value>
  </data>
  <data name="General.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Regex.Text" xml:space="preserve">
    <value>Regular Expressions</value>
  </data>
  <data name="TestUrl.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="upDateButton.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="autoAsciiConvertLabel.Help" xml:space="preserve">
    <value>When checked, any accented (diacritic) characters such as å and è will be converted to their plain-ascii equivalent.  Example : å -&gt; a and è -&gt; e.</value>
  </data>
  <data name="autoAsciiConvertLabel.Text" xml:space="preserve">
    <value>Convert Accented Characters</value>
  </data>
  <data name="checkForDuplicatedUrlsLabel.Help" xml:space="preserve">
    <value>When checked, any duplicate URLs found in this site will be reported in the event log.  The system will choose which of the duplicate URLs to show.</value>
  </data>
  <data name="checkForDuplicatedUrlsLabel.Text" xml:space="preserve">
    <value>Warn in Log About Duplicate URLs</value>
  </data>
  <data name="forceLowerCaseLabel.Help" xml:space="preserve">
    <value>When checked, URLs will be converted to all lower case.</value>
  </data>
  <data name="redirectOnWrongCaseLabel.Help" xml:space="preserve">
    <value>When checked, any URL that is not in lower case will be redirected to the lower case version of that URL.</value>
  </data>
  <data name="redirectOnWrongCaseLabel.Text" xml:space="preserve">
    <value>Redirect Mixed Case URLs</value>
  </data>
  <data name="replaceCharPairsCaption.Text" xml:space="preserve">
    <value>Use f, r pairs, where 'f' is the char to find, 'r' is the char to replace with</value>
  </data>
  <data name="replaceCharPairsLabel.Help" xml:space="preserve">
    <value>To replace a character in a URL with another character, use a comma delimited pair of characters where the first value in the pair is the ‘find’, and the second is the ‘replace’. f,r will find any ‘f’ in a URL and replace it with ‘r’. This can be used for replacing æ with ‘ae’ and similar. This only applies to Page and User Profile URLs and any URLs controlled through URL providers.  You can only replace single characters - the 'find' character can only be a single value, while the 'replace' can be a string of one or more characters.</value>
  </data>
  <data name="replaceCharPairsLabel.Text" xml:space="preserve">
    <value>Find/Replace These Characters</value>
  </data>
  <data name="replaceCharsLabel.Help" xml:space="preserve">
    <value>When the characters in this list appear in a page name, will be replaced with the value specified as the ‘replacement’ character (- or _).  To replace any other character, append it to the end of the list.  To stop any character from being replaced, remove it from the list.
&lt;br&gt;&lt;br&gt;
[NOTE: The list shown in the ‘replace characters with supplied characters’ is actually the default for this one]</value>
  </data>
  <data name="replaceCharsLabel.Text" xml:space="preserve">
    <value>Replace These Characters</value>
  </data>
  <data name="spaceEncodingHex.Text" xml:space="preserve">
    <value>Hex Encoding (%20)</value>
  </data>
  <data name="spaceEncodingLabel.Help" xml:space="preserve">
    <value>This character is used to replace any spaces in a generated URL path where parameters with spaces have been supplied.</value>
  </data>
  <data name="spaceEncodingLabel.Text" xml:space="preserve">
    <value>URL Space Encoding Value</value>
  </data>
  <data name="spaceEncodingPlus.Text" xml:space="preserve">
    <value>English Name (+)</value>
  </data>
  <data name="enableCustomModuleProvidersLabel.Help" xml:space="preserve">
    <value>When checked, the Custom URL Provider functionality of this site is enabled.  When unchecked, no custom URL providers will be loaded.</value>
  </data>
  <data name="enableCustomModuleProvidersLabel.Text" xml:space="preserve">
    <value>Enable Custom URL Providers</value>
  </data>
  <data name="ignoreRegExLabel.Help" xml:space="preserve">
    <value>The Ignore URL Regex pattern is used to stop processing of URLs by the URL Rewriting module.  This should be used when the URL in question doesn’t need to be rewritten, redirected or otherwise processed through the URL Rewriter.  Examples include images, css files, pdf files, service requests and requests for resources not associated with DotNetNuke.</value>
  </data>
  <data name="ignoreRegExLabel.Text" xml:space="preserve">
    <value>Ignore URL Regular Expression</value>
  </data>
  <data name="ignoreRegExCaption.Text" xml:space="preserve">
    <value>Any URL matching this regular expression will not be processed by the URL Rewriter, and will not be rewritten or redirected.   Use this expression to prevent URLs being processed by the URL Rewriter.</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExCaption.Text" xml:space="preserve">
    <value>Any URL Matching this regular expression will not be redirected between http and https, or from https to http.</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Redirect https URL regular expression is used to stop unwanted redirects between http and https URLs.  It prevents the redirect for any matching URLs, and works both for http-&gt;https and https-&gt;http redirects.</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExLabel.Text" xml:space="preserve">
    <value>Do Not Redirect Https URL Regular Expression</value>
  </data>
  <data name="doNotRedirectUrlRegExCaption.Text" xml:space="preserve">
    <value>Any URL matching this regular expression will not be redirected for any reason.</value>
  </data>
  <data name="doNotRedirectUrlRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Redirect URL regular expression pattern prevents matching URLs from being redirected in all cases.  Use this pattern when a URL is being redirected incorrectly.</value>
  </data>
  <data name="doNotRedirectUrlRegExLabel.Text" xml:space="preserve">
    <value>Do Not Redirect URL Regular Expression</value>
  </data>
  <data name="doNotRewriteRegExCaption.Text" xml:space="preserve">
    <value>Any URL matching this regular expression will not be rewritten.  The web server will process the URL in its original format.</value>
  </data>
  <data name="doNotRewriteRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Rewrite URL regular expression stops URL Rewriting from occurring on any URL that matches.  Use this value when a URL is being interpreted as a DotNetNuke page, but should not be.</value>
  </data>
  <data name="doNotRewriteRegExLabel.Text" xml:space="preserve">
    <value>Do Not Rewrite URL Regular Expression</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExCaption.Text" xml:space="preserve">
    <value>Any URL Matching this regular expression will be generated in a longer URL, which includes the TabId of the DotNetNuke page.  The resulting URL will be in the style of /Pagename/TabId/xx/default.aspx.</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Use Friendly URLs regular expression pattern is used to force certain DotNetNuke pages into using a longer URL for the page.  This is normally used to generate behaviour for backwards compatibility.</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExLabel.Text" xml:space="preserve">
    <value>Do Not Use Friendly URLs Regular Expression</value>
  </data>
  <data name="keepInQueryStringRegExCaption.Text" xml:space="preserve">
    <value>Any segment of a friendly URL path that matches this regular expression will be kept in the querystring of the URL instead.</value>
  </data>
  <data name="keepInQueryStringRegExLabel.Help" xml:space="preserve">
    <value>The Keep in Querystring regular expression allows the matching of part of the friendly URL Path and ensuring that it stays in the querystring.  When a DotNetNuke URL of /pagename/key/value is generated, a ‘Keep in Querystring Regular Expression’ pattern of /key/value will match that part of the path and leave it as part of the querystring for the generated URL; e.g. /pagename?key=value.</value>
  </data>
  <data name="keepInQueryStringRegExLabel.Text" xml:space="preserve">
    <value>Keep in Querystring Regular Expression</value>
  </data>
  <data name="preventLowerCaseUrlRegExCaption.Text" xml:space="preserve">
    <value>Any URL Matching this regular expression will not be changed into a lower case URL when the ‘lowercase URLs’ option is used.</value>
  </data>
  <data name="preventLowerCaseUrlRegExLabel.Help" xml:space="preserve">
    <value>The Prevent Lowercase URL regular expression stops the automatic conversion to lower case for any matching URLs.  Use this pattern to prevent the lowercase conversion of any URLs which need to remain in mixed/upper case.  This is frequently used to stop the conversion of URLs where the contents of the URL contain an encoded character or case-sensitive value.</value>
  </data>
  <data name="preventLowerCaseUrlRegExLabel.Text" xml:space="preserve">
    <value>Prevent Lowercase URL Regular Expression</value>
  </data>
  <data name="siteUrlsOnlyRegExCaption.Text" xml:space="preserve">
    <value>Any URL matching this regular expression will be evaluated against the rules contained in the siteURLs.config file.</value>
  </data>
  <data name="siteUrlsOnlyRegExLabel.Help" xml:space="preserve">
    <value>The Site URLs Only regular expression pattern changes the processing order for matching URLs.  When matched, the URLs are evaluated against any of the regular expressions in the siteURLs.config file, without first being checked against the list of friendly URLs for the site.  Use this pattern to force processing through the siteURLs.config file for an explicit URL Rewrite or Redirect located within that file.</value>
  </data>
  <data name="siteUrlsOnlyRegExLabel.Text" xml:space="preserve">
    <value>Site URLs Only Regular Expression</value>
  </data>
  <data name="urlsWithNoExtensionRegExCaption.Text" xml:space="preserve">
    <value>Any URL that matches this regular expression is a valid resource on the server, but does not ordinarily end in a file extension such as .html, .aspx, axd, etc.</value>
  </data>
  <data name="urlsWithNoExtensionRegExLabel.Help" xml:space="preserve">
    <value>The URLs with no Extension regular expression pattern is used to validate URLs that do not refer to a resource on the server, are not DotNetNuke pages, but can be requested with no URL extension.  URLs matching this regular expression will not be treated as a 404 when a matching DotNetNuke page can not be found for the URL.</value>
  </data>
  <data name="urlsWithNoExtensionRegExLabel.Text" xml:space="preserve">
    <value>URLs With No Extension Regular Expression</value>
  </data>
  <data name="validFriendlyUrlRegExCaption.Text" xml:space="preserve">
    <value>Any characters in page names or URL segments that do not match this regular expression will be excluded from a Friendly URL Path.</value>
  </data>
  <data name="validFriendlyUrlRegExLabel.Help" xml:space="preserve">
    <value>This pattern is used to determine whether the characters that make up a page name or URL segment are valid for forming a friendly URL path. Characters that do not match the pattern will be removed from page names</value>
  </data>
  <data name="validFriendlyUrlRegExLabel.Text" xml:space="preserve">
    <value>Valid Friendly URL Regular Expression</value>
  </data>
  <data name="identifiedTabLabel.Help" xml:space="preserve">
    <value>The name of the DNN page that has been identified during the URL Rewriting process.</value>
  </data>
  <data name="identifiedTabLabel.Text" xml:space="preserve">
    <value>Identified Page</value>
  </data>
  <data name="languageLabel.Help" xml:space="preserve">
    <value>Shows the culture code as identified during the URL Rewriting process.</value>
  </data>
  <data name="languageLabel.Text" xml:space="preserve">
    <value>Identified Language / Culture</value>
  </data>
  <data name="operationMessagesLabel.Help" xml:space="preserve">
    <value>Any debug messages created during the test URL Rewriting process.</value>
  </data>
  <data name="operationMessagesLabel.Text" xml:space="preserve">
    <value>Operation Messages</value>
  </data>
  <data name="redirectionResultLabel.Help" xml:space="preserve">
    <value>If the tested URL is to be redirected, shows the redirect location of the URL.</value>
  </data>
  <data name="redirectionResultLabel.Text" xml:space="preserve">
    <value>Redirection Result</value>
  </data>
  <data name="rewritingResultLabel.Help" xml:space="preserve">
    <value>Shows the rewritten URL, in the raw format that will be seen by the DNN platform and third-party extensions.</value>
  </data>
  <data name="rewritingResultLabel.Text" xml:space="preserve">
    <value>Rewriting Result</value>
  </data>
  <data name="testUrlRewritingButton.Text" xml:space="preserve">
    <value>Test URL Rewriting</value>
  </data>
  <data name="testUrlRewritingCaption.Text" xml:space="preserve">
    <value>Enter URL to test (include http:// or https:// and full URL)</value>
  </data>
  <data name="testUrlRewritingLabel.Help" xml:space="preserve">
    <value>Enter a fully-qualified URL (including http:// or https://) into this box in order to test out the URL Rewriting / Redirecting.</value>
  </data>
  <data name="testUrlRewritingLabel.Text" xml:space="preserve">
    <value>Test URL Rewriting</value>
  </data>
  <data name="allowDebugCodeLabel.Help" xml:space="preserve">
    <value>When checked, allows requests to specify a debug code which provides extra URL Rewriting &amp; Redirecting debug information in the response headers.  This should be used for short periods of debugging only.</value>
  </data>
  <data name="allowDebugCodeLabel.Text" xml:space="preserve">
    <value>Allow Debug Code</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Redirect Https URL Regular Expression is invalid</value>
  </data>
  <data name="doNotRedirectUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Redirect URL Regular Expression is invalid</value>
  </data>
  <data name="doNotRewriteRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Rewrite URL Regular Expression is invalid</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Use Friendly URLs Regular Expression is invalid</value>
  </data>
  <data name="ignoreRegExInvalidPattern.Text" xml:space="preserve">
    <value>Ignore URL Regular Expression is invalid</value>
  </data>
  <data name="InvalidRequest.Text" xml:space="preserve">
    <value>The request is invalid</value>
  </data>
  <data name="keepInQueryStringRegExInvalidPattern.Text" xml:space="preserve">
    <value>Keep In Querystring Regular Expression is invalid</value>
  </data>
  <data name="preventLowerCaseUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Prevent Lowercase URL Regular Expression is invalid</value>
  </data>
  <data name="setDefaultSiteLanguageLabel.Help" xml:space="preserve">
    <value>When checked, the default language for this site will always be set in the rewritten URL when no other language is found.</value>
  </data>
  <data name="setDefaultSiteLanguageLabel.Text" xml:space="preserve">
    <value>Always Set Default Site Language</value>
  </data>
  <data name="showPageIndexRebuildMessagesLabel.Help" xml:space="preserve">
    <value>When checked, each rebuild of the page URL index for the site will be logged in the event log.   Use this feature to determine the cache usage for the Page URL index.</value>
  </data>
  <data name="showPageIndexRebuildMessagesLabel.Text" xml:space="preserve">
    <value>Show Page Index Rebuild Messages in Site Log</value>
  </data>
  <data name="siteUrlsOnlyRegExInvalidPattern.Text" xml:space="preserve">
    <value>Site URLs Only Regular Expression is invalid</value>
  </data>
  <data name="SomeRegExAreInvalid.Text" xml:space="preserve">
    <value>Some regular expressions are invalid</value>
  </data>
  <data name="UrlMustBeSpecified.Text" xml:space="preserve">
    <value>URL is not specified</value>
  </data>
  <data name="urlsWithNoExtensionRegExInvalidPattern.Text" xml:space="preserve">
    <value>URLs With No Extension Regular Expression is invalid</value>
  </data>
  <data name="validFriendlyUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Valid Friendly URL Regular Expression is invalid</value>
  </data>
  <data name="OptionalSettings.Text" xml:space="preserve">
    <value>Optional Settings</value>
  </data>
  <data name="pageListLabel.Text" xml:space="preserve">
    <value>Pages available in the Site</value>
  </data>
  <data name="pageNameLabel.Help" xml:space="preserve">
    <value>Some modules generate a friendly URL by defining the last part of the URL explicitly.  If this is the case, enter the value for the ‘pagename’ value that is used when generating the URL.  If you have no explicit value, or do not know when to use this value, leave the value empty.</value>
  </data>
  <data name="pageNameLabel.Text" xml:space="preserve">
    <value>Custom Page Name / URL End String</value>
  </data>
  <data name="queryStringLabel.Help" xml:space="preserve">
    <value>To generate a URL which includes extra information in the path, add on the path information in the form of a querystring.  For example, entering &amp;key=value will change the generated URL to include/key/value in the URL path.  Use this feature to test out the example URLs generated by third party URLs.</value>
  </data>
  <data name="queryStringLabel.Text" xml:space="preserve">
    <value>Add this Query String</value>
  </data>
  <data name="resultingUrlsLabel.Text" xml:space="preserve">
    <value>Resulting URLs</value>
  </data>
  <data name="Search.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="selectPageToTestLabel.Help" xml:space="preserve">
    <value>Select a page for this site to test out the URL generation.   You can use the ‘Search’ box to filter the list of pages.</value>
  </data>
  <data name="selectPageToTestLabel.Text" xml:space="preserve">
    <value>Select a Page to Test</value>
  </data>
  <data name="TestUrlButtonCaption.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="resultingUrlsLabel.Help" xml:space="preserve">
    <value>Shows the list of URLs that can be generated from the selected page, depending on alias and/or language.</value>
  </data>
  <data name="TestUrlButtonTooltip.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="replaceCharPairsInvalidPattern.Text" xml:space="preserve">
    <value>The list of replacement characters is not valid.</value>
  </data>
  <data name="AdvancedUrlManagementActivationWarning.Text" xml:space="preserve">
    <value>Please note, the settings on this page can be changed, but will not take effect until the site is put into advanced mode. 
Note the information on how to do that is in this wiki page: &lt;a href="http://www.dnnsoftware.com/Resources/Wiki/Page/Activating-Advanced-Url-Management" target="_blank"&gt;www.dnnsoftware.com/Resources/Wiki/Page/Activating-Advanced-Url-Management&lt;/a&gt;</value>
  </data>
</root>